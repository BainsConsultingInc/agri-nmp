@model SERVERAPI.ViewModels.CalculateViewModel

@{
    ViewBag.Title = "Calculate Nutrients";
}
<!-- modal placeholder-->
<div id='myModal' class='modal'>
    <div class="modal-dialog" id="divSize">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

<!-- BODY CONTENT -->

<div class="header-height"></div>

<div class="step-header">
    <div class="container">
        <div class="col-sm-6">
            <span class="step-header-circle">5</span>
            <span class="step-header-name">Calculate Nutrients</span>
        </div>
        <div class="col-sm-6">
            <div class="col-sm-3"></div>
            <div class="col-sm-3 text-right">
                <span class="step-header-steps">Step 5 of 6</span>
            </div>
            <div class="col-sm-6 step-header-form">
                <span>Units</span>
                <select class="form-control" id="select" disabled="disabled" title="Not Implemented" style="width:80px">
                    <option>lb/ac</option>
                </select>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="step-forms col-sm-12">
        <!-- PAGE CONTENT -->
        <form asp-controller="Nutrients" asp-action="Calculate" method="post">
            <div class="step-forms col-sm-2">
                @if (Model.fldsFnd)
                {
                    <div id="fieldList">
                        @await Component.InvokeAsync("FieldList", new { cntl = "Nutrients", actn = "Calculate" })
                    </div>
                }

                <button class="btn btn-default" type="button" data_modal2="" data-type="@Url.Action("FieldDetail", "Fields", new { target = "#fieldList", cntl = "Nutrients", actn = "Calculate" })">Add field</button>
            </div>
            <div class="step-forms col-sm-9">
                @if (Model.fldsFnd)
                {
                    <div class="form-box">
                        <div class="form-box-header clearfix">
                            <button class="btn btn-success" data_modal3="" data-type="@Url.Action("CropDetails", "Nutrients", new { fldName = Model.currFld })">Add Crop</button>
                            <button class="btn btn-success" type="button" data_modal="" data-type="@Url.Action("ManureDetails", "Nutrients", new { fldName = Model.currFld })">Add Manure</button>
                            <button class="btn btn-success" disabled="disabled">Add Fertilzer</button>
                            <button class="btn btn-success" type="button" data_modal3="" data-type="@Url.Action("OtherDetails", "Nutrients", new { fldName = Model.currFld })">Add Other</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-box">
                        <div class="form-box-header clearfix">
                            <h3>To add nutrients please add a field first</h3>
                        </div>
                    </div>
                }
                <div class="form-box">
                    <div class="panel-group">
                        <div class="Table">
                            <div class="TableBody" id="heading">
                                @await Component.InvokeAsync("CalcHeading", new { fldName = Model.currFld })
                            </div>
                            @if (Model.currFld != null)
                            {
                                <div class="TableBody" id="message">
                                    @await Component.InvokeAsync("CalcMessages", new { fldName = Model.currFld })
                                </div>
                                <div class="TableBody" id="crop">
                                    @await Component.InvokeAsync("CalcCrops", new { fldName = Model.currFld })
                                </div>
                                <div class="TableBody" id="manure">
                                    @await Component.InvokeAsync("CalcManure", new { fldName = Model.currFld })
                                </div>
                                <div class="TableBody" id="other">
                                    @await Component.InvokeAsync("CalcOther", new { fldName = Model.currFld })
                                </div>
                                <div class="TableBody" id="summary">
                                    @await Component.InvokeAsync("CalcSummary", new { fldName = Model.currFld })
                                </div>
                            }
                        </div>
                    </div>
                </div>
                </div>

                <br />
                <br />
                <br />
                <br />
                <div class="form-box-submit">
                    <input class="form-box-submit-button btn btn-primary" style="float:left" type="button" value="Previous" onclick="window.location.href='@Url.Action("Manure", "Manure" )';" />
                    <input class="form-box-submit-button btn btn-primary" style="float:right" type="button" value="Next" onclick="window.location.href='@Url.Action("Report", "Report" )';" />
                </div>
            @Html.HiddenFor(x => x.fldsFnd)
            @Html.HiddenFor(x => x.currFld)
        </form>
    </div>
</div>
@section Scripts {
<script type="text/javascript">
    //
    // data_modal  -> uses large format modal popup
    // data_modal2 -> uses small format modal popup and refreshes the entire screen when done
    // data_modal3 -> uses small format modal popup
    //
    // ensure this event handler is attached to current and future elements (after partial renders)
    $(document).on("click", '[data_modal]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").addClass("modal-lg");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindForm(this);
        });
        return false;
    });

    $(document).on("click", '[data_modal2]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").removeClass("modal-lg");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindForm2(this);
        });
        return false;
    });

    $(document).on("click", '[data_modal3]', function (e) {
        $.ajaxSetup({ cache: false });
        $type = $(this).data('type'); // this works as of jQuery 1.4.3, otherwise $(this).attr('data-type');
        $("#divSize").removeClass("modal-lg");
        $('#myModalContent').load($type, function () {
            $('#myModal').modal({
                /*backdrop: 'static',*/
                //keyboard: true
            }, 'show');
            bindForm2(this);
        });
        return false;
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlMan", function () {
            $('#buttonPressed').val("TypeChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlTyp", function () {
            $('#buttonPressed').val("TypeChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlAppl", function () {
            $('#buttonPressed').val("ApplChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlCrop", function () {
            $('#buttonPressed').val("CropChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("change", "#ddlPrev", function () {
            $('#buttonPressed').val("PrevChange");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("click", "#rstN", function () {
            $('#buttonPressed').val("ResetN");
            $("#modForm").submit();
        })
    });

    $(document).ready(function () {
        $("body").on("click", "#rstA", function () {
            $('#buttonPressed').val("ResetA");
            $("#modForm").submit();
        })
    });

    $(document).on("onload", "#fieldList", function () {
        alert("current");
        current();
    });

    $(document).ready(function () {
        current();
    });

    $(document).on("change", "#fieldList", function () {
        alert("changed");
    });

    function bindForm(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        $('#heading').load(result.urlHead);
                        $('#message').load(result.urlMsg);
                        $(result.target).load(result.url);
                        $('#summary').load(result.urlSumm);
                    } else {
                        $('#myModalContent').html(result);
                        bindForm(dialog);
                    }
                }
            });
            return false;
        });
    }
    function bindForm2(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize()
            })
                .done(function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        //$(result.target).load(result.url); //  Load data from the server and place the returned HTML into the matched element
                        window.location.href = '@Url.Action("Calculate","Nutrients")';
                    } else {
                        $('#myModalContent').html(result);
                        bindForm2(dialog);
                    }
                });

            return false;
        });
    }
    function bindForm3(dialog) {
        $('form', dialog).submit(function () {
            $.ajax({
                cache: false,
                url: this.action,
                type: this.method,
                data: $(this).serialize()
            })
                .done(function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        $('#heading').load(result.urlHead);
                        $(result.target).load(result.url); //  Load data from the server and place the returned HTML into the matched element
                        $('#summary').load(result.urlSumm);
                    } else {
                        $('#myModalContent').html(result);
                        bindForm(dialog);
                    }
                });

            return false;
        });
    }


    function current() {
        $("#fieldList li a").each(function () {
            if ($(this).text() == $("#currFld").val()) {
                $(this).addClass('btn-primary');
            }
        });
    }

    $(document).on('propertychange input paste', '#rate', function () {
        NeedRefresh();
    });

    $(document).on('change', '#ddlAppl', function () {
        NeedRefresh();
    });

    $(document).on('change', '#ddlRate', function () {
        NeedRefresh();
    });

    $(document).on('propertychange input paste', '#avail', function () {
        NeedRefresh();
    });

    $(document).on('propertychange input paste', '#nh4', function () {
        NeedRefresh();
    });

    $(document).on('change', '#crude', function () {
        NeedRefresh();
    });

    $(document).on('change', '#yield', function () {
        NeedRefresh();
    });

    $(document).on('change', '#cropDesc', function () {
        NeedRefresh();
    });

    $(document).on('change', '#reqN', function () {
        NeedRefresh();
    });

    $(document).on('change', '#reqP', function () {
        NeedRefresh();
    });

    $(document).on('change', '#reqK', function () {
        NeedRefresh();
    });

    $(document).on('change', '#remN', function () {
        NeedRefresh();
    });

    $(document).on('change', '#remP', function () {
        NeedRefresh();
    });

    $(document).on('change', '#remK', function () {
        NeedRefresh();
    });

    $(document).on('change', '#coverYes', function () {
        NeedRefresh();
    });

    $(document).on('change', '#coverNo', function () {
        NeedRefresh();
    });


    function NeedRefresh() {
        $("#ok_button").html('Calculate');
        $("#ok_button").css('background-color', '#1abbed');
        $("#btnText").val("Calculate");
    }


</script>

}
